name = "half-Cauchy",
name_pos = c(0.36, 0.1),
plot_type = "line",
x = seq(0.0, 3.0, 0.01),
top_space = 0,
ddist = dt,
ddist_params = list(ncp=0, df=1),
labels = list(scale = c(0.53, 0.5))
),
half_normal = list(
name = "half-normal",
name_pos = c(0.36, 0.1),
plot_type = "line",
x = seq(0.0, 3.0, 0.01),
top_space = 0,
ddist = dnorm,
ddist_params = list(mean=0, sd=1),
labels = list(sd = c(0.53, 0.5))
)
)
plot_dist_svg <- function(dist, labels=c(), fname="", color="skyblue", plot_dist_name=T) {
if(fname == "") {
fname = paste(gsub("\\W", "", gsub("\\s", "_", dist$name)), ".svg", sep="")
}
svg(fname, width=2.25, height=1.688, bg="transparent")
plot_dist(dist, labels, color=color, plot_dist_name=plot_dist_name)
dev.off()
}
plot_dist_png <- function(dist, labels=c(), fname="", color="skyblue", plot_dist_name=T) {
if(fname == "") {
fname = paste(gsub("\\W", "", gsub("\\s", "_", dist$name)), ".png", sep="")
}
png(fname, width=165, height=123, bg="transparent", res=72, )
plot_dist(dist, labels, color=color, plot_dist_name=plot_dist_name)
dev.off()
}
plot_text_svg <- function(expr, fname) {
svg(fname, bg="transparent")
plot.new()
text(0.5, 0.5, expr)
dev.off()
}
plot_text_png <- function(expr, fname, pointsize=32, width=640, height=480 ) {
png(fname, bg="transparent", width=width, height=height, pointsize=pointsize)
plot.new()
text(0.5, 0.5, expr)
dev.off()
}
dists
install.packages("logitnorm")
install.packages("devtools")
devtools::install_github("SydneyBioX/scdney", build_opts = c("--no-resave-data", "--no-manual"))
install.packages("scran")
source("https://bioconductor.org/biocLite.R")
biocLite("scran")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scran")
BiocManager::install("limma")
BiocManager::install("MAST")
devtools::install_github("SydneyBioX/scdney", build_opts = c("--no-resave-data", "--no-manual"))
BiocManager::install("hopach")
devtools::install_github("SydneyBioX/scdney", build_opts = c("--no-resave-data", "--no-manual"))
library(scdney)
data("sim")
exprsMat <- sim$sim_exprsMat
subject <- sim$sim_subject
cellTypes <- sim$sim_cellTypes
cond <- sim$sim_cond
dim(exprsMat)
exprsMat
table(subject, cellTypes)
table(cond, cellTypes)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 50)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 1000)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 10000)
View(haber_model)
View(res_scDC_noClust)
View(res_scDC_noClust$results)
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 10)
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE)
summary(res_GLM$pool_res_fixed)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 100)
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE)
summary(res_GLM$pool_res_fixed)
summary(res_GLM$pool_res_random)
table(cond, cellTypes)
sim$sim_cellTypes
sim$sim_subject
sim$sim_cond
table(subject, cellTypes)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 100)
library(scdney)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("percentile", "BCa", "multinom"),
nboot = 100)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 100)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 100)
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE)
summary(res_GLM$pool_res_fixed)
summary(res_GLM$pool_res_random)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE, ncores=8)
View(sim)
res_scDC_noClust <- scDC_clustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
res_scDC_noClust <- scDC_clustering(expresMat, cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
exprsMat <- sim$sim_exprsMat
subject <- sim$sim_subject
cellTypes <- sim$sim_cellTypes
cond <- sim$sim_cond
res_scDC_noClust <- scDC_clustering(expresMat, cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
res_scDC_noClust <- scDC_clustering(exprsMat, cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
warnings()
res_scDC_noClust <- scDC_clustering(exprsMat, cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000, ncores=8)
res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
barplotCI(res_scDC_clust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2")))
barplotCI(res_scDC_clust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"))
barplotCI(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"))
densityCI(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"))
res_GLM <- fitGLM(res_scDC_noClust, c("cond1","cond1","cond1","cond1",
"cond2","cond2","cond2","cond2"),
pairwise = FALSE)
summary(res_GLM$pool_res_fixed)
summary(res_GLM$pool_res_random)
table(subject, cellTypes)
cellTypes
subject
gen_test_cells = [[211., 175.,  269., 179., 166.], [228., 170., 166., 224., 212.],
[219., 133., 196., 275., 177.], [270., 173., 284., 129., 144.],
[365., 140., 152., 189., 154.], [300., 198.,  93., 279., 130.]]
gen_test_cells = array([[211., 175.,  269., 179., 166.], [228., 170., 166., 224., 212.],
[219., 133., 196., 275., 177.], [270., 173., 284., 129., 144.],
[365., 140., 152., 189., 154.], [300., 198.,  93., 279., 130.]])
install.packages("tidyverse")
library(tidyverse)
gen_test_cells = matrix(data=c(211., 175.,  269., 179., 166, 228., 170., 166., 224., 212.,
219., 133., 196., 275., 177., 270., 173., 284., 129., 144.,
365., 140., 152., 189., 154., 300., 198.,  93., 279., 130.),
ncol=5)
gen_test_cells
cellTypes
for(i in c(1:5)){
i
}
paste(i)
for(i in c(1:5)){
paste(i)
}
ct = "Type_" + str(i)
cell_counts = c(211., 175.,  269., 179., 166, 228., 170., 166., 224., 212.,
219., 133., 196., 275., 177., 270., 173., 284., 129., 144.,
365., 140., 152., 189., 154., 300., 198.,  93., 279., 130.)
gen_test_cells = matrix(data=cell_counts,
ncol=5)
paste0(n)
for(n in cell_counts){
paste0(n)
}
for(n in cell_counts){
paste(n)
}
for(n in cell_counts){
print(n)
}
for(n in c(1:30)){
print(n)
}
print(cell_counts[n])
for(n in c(1:30)){
print(cell_counts[n])
}
for(n in c(1:30)){
current_cell_type <- cellTypes[n%%5]
print(current_cell_type)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[n%%5]
print(current_cell_type)
}
subjects <- c("s1_cont", "s2_cont", "s3_cont", "s1_case", "s2_case", "s3_case")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[n%%5]
print(current_cell_type)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[(n%%5)+1]
print(current_cell_type)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[(n-1%%5)+1]
print(current_cell_type)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
print(current_cell_type)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
}
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
pritn(current_subject)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
print(current_subject)
}
print(current_condition)
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
current_condition <- ifelse(n<=15, "control", "case")
print(current_condition)
}
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
test_cellTypes <- c()
test_subject <- c()
test_cond <- c()
subjects <- c("s1_cont", "s2_cont", "s3_cont", "s1_case", "s2_case", "s3_case")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
table(test_cond, test_cellTypes)
test_res_scDC_noClust <- scDC_clustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("percentile", "multinom"),
nboot = 10000)
exprsMat
test_res_scDC_noClust <- scDC_clustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("multinom"),
nboot = 10000)
test_res_scDC_noClust <- scDC_noClustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("BCa")
nboot = 10000)
test_res_scDC_noClust <- scDC_noClustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("BCa")
nboot = 10000)
test_res_scDC_noClust <- scDC_noClustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 10000)
cc_vec <- rep(c(rep("case", 5), rep("control", 5)), 6)
print(cc_vec)
barplotCI(test_res_scDC_noClust, cc_vec)
cc_vec <- rep(c(rep("case", 5), rep("control", 5)), 3)
print(cc_vec)
barplotCI(test_res_scDC_noClust, cc_vec)
densityCI(test_res_scDC_noClust, cc_vec)
res_GLM <- fitGLM(test_res_scDC_noClust, cc_vec,
pairwise = FALSE)
test_res_scDC_noClust <- scDC_noClustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 100)
cc_vec <- rep(c(rep("case", 5), rep("control", 5)), 3)
print(cc_vec)
barplotCI(test_res_scDC_noClust, cc_vec)
densityCI(test_res_scDC_noClust, cc_vec)
res_GLM <- fitGLM(test_res_scDC_noClust, cc_vec,
pairwise = FALSE)
summary(res_GLM$pool_res_fixed)
summary(res_GLM$pool_res_random)
library(tidyverse)
cell_counts <- c(211., 175.,  269., 179., 166, 228., 170., 166., 224., 212.,
219., 133., 196., 275., 177., 270., 173., 284., 129., 144.,
365., 140., 152., 189., 154., 300., 198.,  93., 279., 130.)
gen_test_cells <- matrix(data=cell_counts,
ncol=5)
test_cellTypes <- c()
test_subject <- c()
test_cond <- c()
subjects <- c("base_s1", "base_s2", "bas_s3", "case_s1", "case_s2", "case_s3")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
table(test_cond, test_cellTypes)
subjects <- c("base_s1", "base_s2", "base_s3", "case_s1", "case_s2", "case_s3")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
test_cellTypes <- c()
test_subject <- c()
test_cond <- c()
subjects <- c("base_s1", "base_s2", "base_s3", "case_s1", "case_s2", "case_s3")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
table(test_cond, test_cellTypes)
test_res_scDC_noClust <- scDC_noClustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 100)
cc_vec <- rep(c(rep("case", 5), rep("control", 5)), 3)
print(cc_vec)
barplotCI(test_res_scDC_noClust, cc_vec)
densityCI(test_res_scDC_noClust, cc_vec)
res_GLM <- fitGLM(test_res_scDC_noClust, cc_vec,
pairwise = FALSE)
cc_vec <- c(rep("control", 15), rep("case", 15))
print(cc_vec)
barplotCI(test_res_scDC_noClust, cc_vec)
print(current_subject)
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
print(current_subject)
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
test_cellTypes <- c()
test_subject <- c()
test_cond <- c()
subjects <- c("base_s1", "base_s2", "base_s3", "case_s1", "case_s2", "case_s3")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
print(current_subject)
current_condition <- ifelse(n<=15, "control", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
table(test_cond, test_cellTypes)
test_cellTypes <- c()
test_subject <- c()
test_cond <- c()
subjects <- c("base_s1", "base_s2", "base_s3", "case_s1", "case_s2", "case_s3")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
print(current_subject)
current_condition <- ifelse(n<=15, "base", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
table(test_cond, test_cellTypes)
cell_counts <- c(211., 175.,  269., 179., 166, 228., 170., 166., 224., 212.,
219., 133., 196., 275., 177., 377., 147., 244., 109., 123.,
486., 114., 125., 152., 123., 411., 168., 78., 235., 108.)
gen_test_cells <- matrix(data=cell_counts,
ncol=5)
test_cellTypes <- c()
test_subject <- c()
test_cond <- c()
subjects <- c("base_s1", "base_s2", "base_s3", "case_s1", "case_s2", "case_s3")
cell_Types <- c("C1", "C2", "C3", "C4", "C5")
for(n in c(1:30)){
current_cell_type <- cell_Types[((n-1)%%5)+1]
current_subject <- subjects[((n-1)%/%5)+1]
print(current_subject)
current_condition <- ifelse(n<=15, "base", "case")
test_cellTypes <- c(test_cellTypes, rep(current_cell_type, cell_counts[n]))
test_subject <- c(test_subject, rep(current_subject, cell_counts[n]))
test_cond <- c(test_cond, rep(current_condition, cell_counts[n]))
}
table(test_subject, test_cellTypes)
table(test_cond, test_cellTypes)
test_res_scDC_noClust <- scDC_noClustering(test_cellTypes, test_subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 100)
cc_vec <- c(rep("control", 15), rep("case", 15))
print(cc_vec)
barplotCI(test_res_scDC_noClust, cc_vec)
res_GLM <- fitGLM(test_res_scDC_noClust, cc_vec,
pairwise = FALSE)
summary(res_GLM$pool_res_fixed)
summary(res_GLM$pool_res_random)
library(scdney)
summary(res_GLM$pool_res_fixed)
summary(res_GLM$pool_res_random)
barplotCI(test_res_scDC_noClust, cc_vec)
densityCI(test_res_scDC_noClust, cc_vec)
# Load data
data_path = "/home/icb/johannes.ostner/compositional_diff/compositionalDiff-johannes_tests_2/"
c(data_path, "1234")
daat_path + "1234"
data_path + "1234"
paste(data_path, "1234")
paste(data_path, "1234", sep="")
sum <- summary(py_res_GLM$pool_res_random)
sum <- summary(res_GLM$pool_res_random)
print(sum)
table(subject, cellTypes)
table(cond, cellTypes)
this_file <- rstudioapi::getSourceEditorContext()$path
library(scdney)
library(tidyverse)
getCurrentFileLocation <-  function()
{
this_file <- commandArgs() %>%
tibble::enframe(name = NULL) %>%
tidyr::separate(col=value, into=c("key", "value"), sep="=", fill='right') %>%
dplyr::filter(key == "--file") %>%
dplyr::pull(value)
if (length(this_file)==0)
{
this_file <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(this_file))
}
setwd(getCurrentFileLocation())
# Load data
# data_path = "/home/icb/johannes.ostner/compositional_diff/compositionalDiff-johannes_tests_2/paper_simulation_scripts/scdc_r_data/"
data_path = ""
py_cellTypes <- read.delim(paste(data_path, "scdc_cellTypes.txt", sep=""), header = FALSE, as.is=TRUE)$V1
py_subject <- read.delim(paste(data_path, "scdc_subject.txt", sep=""), header = FALSE, as.is=TRUE)$V1
py_condition <- read.delim(paste(data_path, "scdc_condition.txt", sep=""), header = FALSE, as.is=TRUE)$V1
py_short_conditions <- read.delim(paste(data_path, "scdc_short_conditions.txt", sep=""), header = FALSE, as.is=TRUE)$V1
table(py_cellTypes, py_subject)
table(py_cellTypes, py_condition)
table(py_subject, py_condition)
table(py_subject, py_cellTypes)
py_res_scDC_noClust <- scDC_noClustering(py_cellTypes, py_subject, calCI = TRUE,
calCI_method = c("BCa"),
nboot = 100)
py_res_GLM <- fitGLM(py_res_scDC_noClust, py_short_conditions, pairwise = FALSE)
sum <- summary(py_res_GLM$pool_res_random)
print(sum)
